clc; close all; clear; 
% Neurophotonics HW3

%% part 1+2
% 1. Ask User For Recording Paths per recording type

% Select the folder containing the short recording
%With the laser and trigger ON, blackLevel =0 , exposureTime=15ms short- 30sec 
shortFolderPath = uigetdir('', 'Select the Folder Containing short Recordings');
if shortFolderPath == 0
    disp('User canceled the folder selection.');
    return;
else
    disp(['User selected folder: ', shortFolderPath]);
end

% Select the folder containing the Read Noise recording
%(no laser, cover the input, minimum exposure time(0.021ms), same game, blackLevel 20DU – 200 frames
readNoiseFolderPath = uigetdir('', 'Select the Folder Containing Read Noise Recordings');
if readNoiseFolderPath == 0
    disp('User canceled the folder selection.');
    return;
else
    disp(['User selected folder: ', readNoiseFolderPath]);
end

% Select the folder containing the Dark Background recording
%(no laser, blackLevel =0, exposureTime=15ms, everything else is the same – 400 frames
backgroundFolderPath = uigetdir('', 'Select the Folder Containing Background Recordings');
if backgroundFolderPath == 0
    disp('User canceled the folder selection.');
    return;
else
    disp(['User selected folder: ', backgroundFolderPath]);
end

% Select the folder containing the Long recording
%With the laser and trigger ON, blackLevel =0 , exposureTime=15ms 
% long- breath holding x 4 times , 30 seconds each time
longFolderPath = uigetdir('', 'Select the Folder Containing long Recordings');
if longFolderPath == 0
    disp('User canceled the folder selection.');
    return;
else
    disp(['User selected folder: ', longFolderPath]);
end


% Get a list of TIFF files in the selected folders
shortFilePattern = fullfile(shortFolderPath, '*.tiff');
readNoiseFilePattern = fullfile(readNoiseFolderPath, '*.tiff');
backgroundFilePattern = fullfile(backgroundFolderPath, '*.tiff');
longFilePattern = fullfile(longFolderPath, '*.tiff');

shortTiffFiles = dir(shortFilePattern);
readNoiseTiffFiles = dir(readNoiseFilePattern);
backgroundTiffFiles = dir(backgroundFilePattern);
longTiffFiles = dir(longFilePattern);


% 2. Determine an ROI (plot one frame then ask the user to draw a circle in it)
firstFileName = shortTiffFiles(1).name;
firstFilePath = fullfile(shortFolderPath, firstFileName);
info = imfinfo(firstFilePath);
frame1 = imread(firstFilePath, 1);

% Display the first frame
figure;
imshow(frame1, []);
title('Draw a circular ROI and double-click to confirm');
h = imellipse(gca);
position = wait(h); % Wait for the user to double-click to finalize the position
mask = createMask(h);
close;
%% Part 3 
% 3.Calculate Read Noise Matrix (read noise in each window)
%opening readnois nois frames
numFramesReadNoise = length(readNoiseTiffFiles);
readNoiseFrames = zeros([size(frame1), numFramesReadNoise]);

for i = 1:numFramesReadNoise
    readNoiseFileName = readNoiseTiffFiles(i).name;
    readNoiseFilePath = fullfile(readNoiseFolderPath, readNoiseFileName);
    readNoiseFrames(:,:,i) = imread(readNoiseFilePath);
end
readNois = std(readNoiseFrames,0,3);

% Create a 7x7 averaging filter
filter = ones(7, 7) / (7 * 7);

% Apply the filter to the input matrix A
reasNoisMatrix = imfilter(readNois, filter);



%% part 4
% 4. Calculate Pixels-Non-Uniformity (σ_sp)

%opening background nois frames
numFramesBackgroungNois = length(backgroundTiffFiles);
backgroundNoiseFrames = zeros([size(frame1), numFramesBackgroungNois]);

for i = 1:numFramesBackgroungNois
    backgroundFileName = backgroundTiffFiles(i).name;
    backgroundNoiseFilePath = fullfile(backgroundFolderPath, backgroundFileName);
    backgroundNoiseFrames(:,:,i) = imread(backgroundNoiseFilePath);
end
backgroundNoisMatrix = mean(backgroundNoiseFrames,0,3);


% Opening short recording frames
numFramesShortRecording = 500; 
shortFrames = zeros([size(frame1), numFramesShortRecording]);
for i = 1:numFramesShortRecording
    laserFileName = shortTiffFiles.name(i); % Adjust if necessary
    laserFilePath = fullfile(shortFolderPath, laserFileName);
    shortFrames(:,:,i) = imread(laserFilePath);
end

shortAverage = mean(shortFrames,3);
minusBackground = shortAverage - backgroundNoisMatrix;
nonUnif = stdfilt(minusBackground,true(7)).^2; %calc variance in 7X7 window



%% Part 5
% 5. Calculate G[DU/e]
gain = 24; %[dB]
maxCapacity = 10500;  %[e]
nBits = 12; %bits

Gin = 10^(gain/20);
Gbase = (2^nBits)/maxCapacity;
G = Gbase * Gin; % [DU/e]


%% Part 6
% 6. For every frame, subtract the background
for i = 1:numFramesShortRecording
    shortFrames(:,:,i) = shortFrames(:,:,i) - backgroundNoisMatrix;
end

% Display results
disp('Read Noise Matrix:');
disp(readNoiseMatrix);
disp('Variance Matrix:');
disp(varianceMatrix);
disp('G [DU/e]:');
disp(G);

%% Part 7
% Calc Raw contrast per window
% Define the 7x7 averaging filter
filter = ones(7, 7) / (7 * 7);
% Calculate the mean intensity in 7x7 windows
meanIntensity7x7 = conv2(minusBackground, filter, 'same');
k_raw_perWindow = stdfilt(shortFrames,true(7))^2 / meanIntensity7x7