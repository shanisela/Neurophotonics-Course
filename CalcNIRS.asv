function [ dHbR , dHbO, fig ] = CalcNIRS(dataFile, SDS, tissueType, plotChannelIdx, extinctionCoefficientsFile, DPFperTissueFile, relDPFfile )
%% Extract relevant data from the input dataFile
load dataFile;
wavelengths =dataFile.SD.Lambda; %Two wavelengths [nm]
time = dataFile.t; %Time vector
intensities = dataFile.d;
%intensityLow = dataFile.d(:,1:20); %intensity levels at low WL
%intensityHigh = dataFile.d(:,21:end); %intensity levels at high WL

%% Set default values 
if nargin < 7 || isempty(relDPFfile)
    relDPFfile = '.\RelativeDPFCoefficients.csv';
end
if nargin < 6 || isempty(DPFperTissueFile)
    DPFperTissueFile = '.\DPFperTissue.txt';
end
if nargin < 5 || isempty(extinctionCoefficientsFile)
    extinctionCoefficientsFile = '.\ExtinctionCoefficientsData.csv';
end
if nargin < 4 || isempty(plotChannelIdx)
    plotChannelIdx = [];
end

%% Load extinction coefficients and DPF data
extinctionCoefficients = readtable(extinctionCoefficientsFile);
DPFperTissue = readtable(DPFperTissueFile);
relDPF = readtable(relDPFfile);


%% Calculate DPF for the given tissue type and wavelengths
DPF_807nm = DPFperTissue.DPF(strcmp(DPFperTissue.Tissue, tissueType));
relDPF_factors = interp1(relDPF.wavelength, relDPF{:, 2:end}, wavelengths);
DPF = DPF_807nm .* relDPF_factors;

%% Calculate optical densities
I0 = intensities(1, :);
OD = log10(I0 ./ intensities);

%% Calculate extinction coefficients for the given wavelengths
extinction_coeffs = extinctionCoefficients{:, [1, 3, 4]};
epsilon_HbR = interp1(extinction_coeffs.wavelength, extinction_coeffs.HHb, wavelengths);
epsilon_HbO = interp1(extinction_coeffs.wavelength, extinction_coeffs.HbO2, wavelengths);

%% Output
dHbR = zeros(size(OD));
dHbO = zeros(size(OD));
for i = 1:size(OD, 2)
    dHbR(:, i) = OD(:, i) ./ (epsilon_HbR * DPF(1) * SDS);
    dHbO(:, i) = OD(:, i) ./ (epsilon_HbO * DPF(2) * SDS);
end



%% Plot the specified channels
fig = [];
if ~isempty(plotChannelIdx) && isvector(plotChannelIdx) && all(plotChannelIdx >= 1 & plotChannelIdx <= 20 & rem(plotChannelIdx, 1) == 0)
    fig = figure;
    for ch = plotChannelIdx
        subplot(2, 1, 1);
        plot(time, dHbR(:, ch));
        hold on;
        subplot(2, 1, 2);
        plot(time, dHbO(:, ch));
        hold on;
    end
    subplot(2, 1, 1);
    title('HbR Concentration Change');
    xlabel('Time (s)');
    ylabel('\Delta[HbR]');
    subplot(2, 1, 2);
    title('HbO Concentration Change');
    xlabel('Time (s)');
    ylabel('\Delta[HbO]');
elseif isempty(plotChannelIdx)
    disp('No channels specified for plotting.');
else
    disp('Invalid input for plotChannelIdx. Please provide a vector with values in the range [1-20].');
end


end 